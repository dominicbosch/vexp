/* * Copyright (c) 2002 by Tibor Gyalog, Raoul Schneider, Dino Keller, * Christian Wattinger, Martin Guggisberg and The Regents of the University of * Basel. All rights reserved. * * Permission to use, copy, modify, and distribute this software and its * documentation for any purpose, without fee, and without written agreement is * hereby granted, provided that the above copyright notice and the following * two paragraphs appear in all copies of this software. * * IN NO EVENT SHALL THE UNIVERSITY OF BASEL BE LIABLE TO ANY PARTY FOR * DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT * OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF THE UNIVERSITY OF * BASEL HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. * * THE UNIVERSITY OF BASEL SPECIFICALLY DISCLAIMS ANY WARRANTIES, * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY * AND FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS * ON AN "AS IS" BASIS, AND THE UNIVERSITY OF BASEL HAS NO OBLIGATION TO * PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS. * * Authors: Tibor Gyalog, Raoul Schneider, Dino Keller, * Christian Wattinger, Martin Guggisberg <vexp@nano-world.net> * * */package nano.awt;/*** creates a 3-color LED** @author Tibor Gyalog and Raoul Schneider* @version 1.0 17.7.01*/public class FloatLED{/*extends FloatControl{    Image MyImage;    MemoryImageSource linesource;    int[] data=new int[180];    final static int hgelb=(255 << 24) | (255 << 16) | (233 << 8) | 25;    final static int dgelb=(255 << 24) | (111 << 16) | (105 << 8) | 15;    final static int hrot=(255 << 24) | (255 << 16);    final static int drot=(255 << 24) | (111 << 16);    final static int hgruen=(255 << 24) | (255 << 8) ;    final static int dgruen=(255 << 24) | (111 << 8);    int fstGelb=12, fstRot=18;    public FloatLED(int min, int max, double init){    // muss von roaul oder tiby kontrolliert werden,    // ich habe die folgende zeile nur geaendert um zu kompilieren.        super("Led", "FloatLED", min, max, init,0,new FloatDesign());        for(int i=0;i<20;i++){            data[179-(9*i+6)] = (255 << 24) | 0;            data[179-(9*i+7)] = (255 << 24) | 0;            data[179-(9*i+8)] = (255 << 24) | 0;        }    }    public void setValue(double wert){        value = wert;        repaint();    }    public void paint(Graphics g){        setBackground(Color.black);        data=computePattern(value);        linesource=new MemoryImageSource(3,60,data,0,3);        MyImage=createImage(linesource);        g.drawImage(MyImage,2,1,null);        g.drawImage(MyImage,5,1,null);    }    public void mousePressed(MouseEvent e){}    public int[] computePattern(double wert){    int colorcode=dgruen;    int anz=(int)(20*(wert-minValue)/(maxValue-minValue));    if (anz<0){anz=0;}    if (anz>19){anz=19;}    colorcode=hgruen;    for(int i=0;i<=anz;i++){        if(i>=fstGelb){colorcode=hgelb;}        if(i>=fstRot){colorcode=hrot;}        for(int j=0;j<6;j++){data[179-(9*i+j)] = colorcode;}    }    colorcode=dgruen;    for(int i=anz+1;i<=19;i++){        if(i>=fstGelb){colorcode=dgelb;}        if(i>=fstRot){colorcode=drot;}        for(int j=0;j<6;j++){data[179-(9*i+j)] = colorcode;}    }    return data;    }    public Dimension getPreferredSize(){return new Dimension(10,63);}    public Dimension getMinimumSize(){return new Dimension(10,63);}*/}