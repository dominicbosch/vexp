/*  * Copyright (c) 2002 by Tibor Gyalog, Raoul Schneider, Dino Keller,  * Christian Wattinger, Martin Guggisberg and The Regents of the University of  * Basel. All rights reserved. * * Permission to use, copy, modify, and distribute this software and its * documentation for any purpose, without fee, and without written agreement is * hereby granted, provided that the above copyright notice and the following * two paragraphs appear in all copies of this software. *  * IN NO EVENT SHALL THE UNIVERSITY OF BASEL BE LIABLE TO ANY PARTY FOR * DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT * OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF THE UNIVERSITY OF * BASEL HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. *  * THE UNIVERSITY OF BASEL SPECIFICALLY DISCLAIMS ANY WARRANTIES, * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY * AND FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS * ON AN "AS IS" BASIS, AND THE UNIVERSITY OF BASEL HAS NO OBLIGATION TO * PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS. * * Authors: Tibor Gyalog, Raoul Schneider, Dino Keller,  * Christian Wattinger, Martin Guggisberg <vexp@nano-world.net> *  *  */

package nano.awt;import java.awt.*;/*** Specifies how the circle will look like.** @author Raoul Schneider* @version 1.0*/public class FloatDesign{    int compHeight = 100;    int compWidth = 133;    Color kreis = new Color(0, 13, 172);    Color zeiger = new Color(228,0, 56);    Color schritteKlein = new Color(0, 126, 255);    Color schritteGross = new Color(0, 50, 190);    int displaySchrittWeite = 1;    int displaySchrittWeiteGross = 5;/*** Simple constructor without parameters. Used when the look should only vary a little.* Changes are made using the methods*/    public FloatDesign(){    }/*** Constructor that changes the units** @param zeigerAbstandKlein Distance of small units* @param zeigerAbstandGross Distance of big units*/    public FloatDesign(int zeigerAbstandKlein, int zeigerAbstandGross){        displaySchrittWeite = zeigerAbstandKlein;        displaySchrittWeiteGross =zeigerAbstandGross;    }/*** Constructor that changes the units and height and width of component** @param zeigerAbstandKlein Distance of small units* @param zeigerAbstandGross Distance of big units* @param breite				Width of Component* @param hoehe				Height of Component*/    public FloatDesign(int zeigerAbstandKlein, int zeigerAbstandGross, int breite, int hoehe){        displaySchrittWeite = zeigerAbstandKlein;        displaySchrittWeiteGross =zeigerAbstandGross;        compWidth = breite;        compHeight = hoehe;    }/*** This constructor lets you change the colors of all items** @param    kreisFarbe      Color of circle* @param ZeigerFarbe        Color of the Pointer* @param schritteKleinFarbe Color of small units* @param schritteGrossFarbe Color of big units*/    public FloatDesign(Color kreisFarbe, Color ZeigerFarbe, Color schritteKleinFarbe, Color schritteGrossFarbe){        kreis = kreisFarbe;        zeiger = ZeigerFarbe;        schritteKlein = schritteKleinFarbe;        schritteGross = schritteGrossFarbe;    }    /**    * This constructor lets you change the colors of all items    *    * @param    kreisFarbe      Color of circle    * @param ZeigerFarbe        Color of the Pointer    * @param schritteKleinFarbe Color of small units    * @param schritteGrossFarbe Color of big units    * @param zeigerAbstandKlein Distance of small units    * @param zeigerAbstandGross Distance of big units    * @param Breite         Sets width of this component    * @param Hoehe          Sets height of this component    */    public FloatDesign(Color kreisFarbe, Color ZeigerFarbe, Color schritteKleinFarbe, Color schritteGrossFarbe, int zeigerAbstandKlein, int zeigerAbstandGross, int Breite, int Hoehe){        kreis = kreisFarbe;        zeiger = ZeigerFarbe;        schritteKlein = schritteKleinFarbe;        schritteGross = schritteGrossFarbe;        displaySchrittWeite = zeigerAbstandKlein;        displaySchrittWeiteGross =zeigerAbstandGross;        compHeight = Hoehe;        compWidth = Breite;    }    //============== Methoden (Setter und Getter) ==============================    /**    * Returns distance between the big units    * @return displaySchritteWeiteGross Returns distance between the big units    */    public int getDisplaySchrittWeiteGross(){ return displaySchrittWeiteGross; }    /**    * Sets the distance between the big units    * @param abstandGross   Distance between the big units    */    public void setDisplaySchrittWeiteGross(int abstandGross){displaySchrittWeiteGross = abstandGross; }    /**    * Returns distance between the small units    * @return displaySchrittWeite   Distance between the small units    */    public int getDisplaySchrittWeite(){ return displaySchrittWeite; }    /**    * Sets the distance between the small units    * @param abstandKlein   Distance between the small units    */    public void setDisplaySchrittWeite(int abstandKlein){ displaySchrittWeite = abstandKlein; }    /**    * Returns the color of the circle    * @return kreis     color of circle    */    public Color getKreis(){ return kreis; }    /**    * RGB color to color the circle    * @param NewColor    */    public void setKreis(Color NewColor){ kreis = NewColor; }    /**    * RGB color with the specified red, green, and blue values in the range (0 - 255) to color the circle    *    * @param r  red    * @param g  green    * @param b  blue    */    public void setKreis(int r,int g, int b){ kreis = new Color(r,g,b); }    /**    * Returns color of the pointer    * @return color of pointer    */    public Color getZeigerFarbe(){ return zeiger; }    /**    * Creates an sRGB color with the specified red, green, and blue values in the range (0 - 255) to color the pointer    *    * @param r  red    * @param g  green    * @param b  blue    */    public void setZeigerFarbe(int r,int g, int b){ zeiger = new Color(r,g,b); }    /**    * Returns color of small units    *@return color of small units    */    public Color getSchritteKlein(){ return schritteKlein; }    /**    * Creates an sRGB color with the specified red, green, and blue values in the range (0 - 255) to color the small units    *    * @param r  red    * @param g  green    * @param b  blue    */    public void setSchriiteKlein(int r,int g, int b){ schritteKlein = new Color(r,g,b); }    /**    * Returns color of big units    * @return color of big units    */    public Color getSchritteGross(){ return schritteGross; }    /**    * Creates an sRGB color with the specified red, green, and blue values in the range (0 - 255) to color the big units    *    * @param r  red    * @param g  green    * @param b  blue    */    public void setSchritteGross(int r,int g, int b){ schritteGross = new Color(r,g,b); }    /**    * Returns the components height    * @return height of component    */    public int getCompHeight(){ return compHeight; }    /**    * Sets the components Height    *    * @param hoehe  New height of the component    */    public void setCompHeight(int hoehe){ compHeight = hoehe; }    /**    * Returns the components width    * @return width of component    */    public int getCompWidth(){ return compWidth; }    /**    * Sets the components width    *    * @param weite      New width of the component    */    public void setCompWidth(int weite){ compWidth = weite; }}